import { ref, computed } from 'vue'
import {
    Room,
    RoomEvent,
    createLocalVideoTrack,
    createLocalAudioTrack,
    createAudioAnalyser,
    createLocalScreenTracks,
    Track
} from 'livekit-client'

export const useRoomLogic = (roomName) => {
    // ===== –û–°–ù–û–í–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï =====
    const room = ref(null)
    const connected = ref(false)
    const connecting = ref(false)
    const error = ref(null)
    const playbackBlocked = ref(false)
    const userName = ref('user' + Math.floor(Math.random() * 1000))

    // ===== –õ–û–ö–ê–õ–¨–ù–´–ï –¢–†–ï–ö–ò =====
    const localVideoTrack = ref(null)
    const localAudioTrack = ref(null)

    // –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞—Ä–∏–Ω–≥ —ç–∫—Ä–∞–Ω–∞ - computed –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const localScreenTrack = computed(() => getLocalScreenTrack())
    const isScreenSharing = computed(() => {
        return room.value?.localParticipant?.isScreenShareEnabled || false
    })

    // ===== –£–î–ê–õ–Å–ù–ù–´–ï –£–ß–ê–°–¢–ù–ò–ö–ò =====
    const remoteTracks = ref([])
    const participants = ref([])

    // ===== –ê–ö–¢–ò–í–ù–´–ô –°–ü–ò–ö–ï–† =====
    const activeSpeakers = ref([])
    const speakingParticipants = ref(new Set())

    // ===== –õ–û–ö–ê–õ–¨–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ì–†–û–ú–ö–û–°–¢–ò =====
    const localVolumeLevel = ref(0)
    const isLocalSpeaking = ref(false)
    let localVolumeMonitor = null
    let audioAnalyser = null

    // ===== –¢–û–ö–ï–ù =====
    const fetchToken = async (userEmail, roomName) => {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∞ –Ω–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        const actualRoomName = roomName?.value || roomName
        console.log('üîë –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è:', { userEmail, roomName: actualRoomName })

        try {
            const requestBody = { userId: userEmail, roomName: actualRoomName }
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', requestBody)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ —Å–Ω–∞—á–∞–ª–∞
            console.log('üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...')

            const res = await fetch('https://meet-api.baza.expert/api/token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(requestBody)
            })

            console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', res.status, res.statusText)
            console.log('üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(res.headers.entries()))

            if (!res.ok) {
                let errorText
                try {
                    errorText = await res.text()
                } catch {
                    errorText = `HTTP ${res.status} ${res.statusText}`
                }
                console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', res.status, errorText)
                throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ${res.status}: ${errorText}`)
            }

            const contentType = res.headers.get('content-type')
            if (!contentType || !contentType.includes('application/json')) {
                const textResponse = await res.text()
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', contentType, '–û—Ç–≤–µ—Ç:', textResponse)
                throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${contentType}`)
            }

            const data = await res.json()
            console.log('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data)

            const token = data?.token ?? data?.accessToken ?? null
            if (!token) {
                console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ:', data)
                throw new Error('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞')
            }

            console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ, –¥–ª–∏–Ω–∞:', token.length)
            return token
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', err)

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            if (err.name === 'TypeError' && err.message.includes('fetch')) {
                console.error('üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é: —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:1337')
                throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:1337')
            }

            throw err
        }
    }

    // ===== ATTACH –ê–£–î–ò–û =====
    const attachRemoteAudio = (track, participant) => {
        if (!track || track.kind !== 'audio') return

        console.log(`üéß –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫ –¥–ª—è ${participant.identity}`)

        let el = document.querySelector(`audio[data-track-sid="${track.sid}"]`)
        if (!el) {
            el = document.createElement('audio')
            el.autoplay = true
            el.playsInline = true
            el.controls = false
            el.dataset.trackSid = track.sid
            document.body.appendChild(el)
        }

        try { track.detach(el) } catch { }

        try {
            track.attach(el)
            console.log(`‚úÖ –ê—É–¥–∏–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –¥–ª—è ${participant.identity}`)
        } catch (err) {
            console.warn('–û—à–∏–±–∫–∞ attach:', err)
            if (track.mediaStreamTrack) {
                el.srcObject = new MediaStream([track.mediaStreamTrack])
            }
        }

        el.muted = false
        el.play().catch(() => {
            console.warn('Playback blocked')
            playbackBlocked.value = true
        })
    }

    // ===== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ì–†–û–ú–ö–û–°–¢–ò =====
    const startLocalVolumeMonitoring = () => {
        if (!localAudioTrack.value) return

        try {
            audioAnalyser = createAudioAnalyser(localAudioTrack.value)

            const updateVolume = () => {
                if (!audioAnalyser || !localAudioTrack.value) return

                const volume = audioAnalyser.calculateVolume()
                const volumePercent = Math.min(100, volume * 100 * 5)
                localVolumeLevel.value = volumePercent
                isLocalSpeaking.value = volumePercent > 10

                localVolumeMonitor = requestAnimationFrame(updateVolume)
            }

            updateVolume()
        } catch (err) {
            console.warn('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', err)
        }
    }

    const stopLocalVolumeMonitoring = () => {
        if (localVolumeMonitor) {
            cancelAnimationFrame(localVolumeMonitor)
            localVolumeMonitor = null
        }
        audioAnalyser = null
        localVolumeLevel.value = 0
        isLocalSpeaking.value = false
    }

    // ===== –ê–ö–¢–ò–í–ù–´–ô –°–ü–ò–ö–ï–† =====
    const handleActiveSpeakersChanged = (speakers) => {
        console.log('üîä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–∏–∫–µ—Ä—ã:', speakers.map(s => s.identity))
        activeSpeakers.value = speakers
    }

    const handleParticipantSpeakingChanged = (participant, isSpeaking) => {
        console.log(`üó£Ô∏è ${participant.identity} ${isSpeaking ? '–Ω–∞—á–∞–ª' : '–ø–µ—Ä–µ—Å—Ç–∞–ª'} –≥–æ–≤–æ—Ä–∏—Ç—å`)
        if (isSpeaking) {
            speakingParticipants.value.add(participant.identity)
        } else {
            speakingParticipants.value.delete(participant.identity)
        }
    }

    const isActiveSpeaker = (participantId) => {
        if (participantId === 'local') {
            return activeSpeakers.value.some(speaker => speaker.identity === room.value?.localParticipant?.identity)
        }
        return activeSpeakers.value.some(speaker => speaker.identity === participantId)
    }

    const isSpeaking = (participantId) => {
        return speakingParticipants.value.has(participantId)
    }

    const getPrimarySpeaker = () => {
        return activeSpeakers.value.length > 0 ? activeSpeakers.value[0] : null
    }

    // ===== –ü–û–õ–£–ß–ï–ù–ò–ï –¢–†–ï–ö–û–í =====
    const getParticipantVideoTrack = (participant) => {
        const videoTrack = remoteTracks.value.find(t =>
            t.participant.sid === participant.sid && t.track.kind === 'video'
        )
        return videoTrack?.track || null
    }

    const getParticipantAudioTrack = (participant) => {
        const audioTrack = remoteTracks.value.find(t =>
            t.participant.sid === participant.sid && t.track.kind === 'audio'
        )
        return audioTrack?.track || null
    }

    const getParticipantScreenTrack = (participant) => {
        const screenTrack = remoteTracks.value.find(t =>
            t.participant.sid === participant.sid &&
            t.track.kind === 'video' &&
            t.publication.source === Track.Source.ScreenShare
        )
        return screenTrack?.track || null
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ —à–∞—Ä–∏–Ω–≥–∞ —ç–∫—Ä–∞–Ω–∞
    const getLocalScreenTrack = () => {
        if (!room.value?.localParticipant) return null
        const screenPub = room.value.localParticipant.getTrackPublication(Track.Source.ScreenShare)
        return screenPub?.videoTrack || null
    }

    // ===== –†–ê–ó–†–ï–®–ï–ù–ò–Ø =====
    const requestMediaPermissions = async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            })
            console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã')
            stream.getTracks().forEach(track => track.stop())
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', err)
            error.value = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞'
        }
    }

    // ===== –°–ú–ï–ù–ê –£–°–¢–†–û–ô–°–¢–í =====
    const onDeviceChanged = async ({ type, deviceId }) => {
        if (!room.value) return

        try {
            if (type === 'video') {
                // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞–º–µ—Ä—É
                if (localVideoTrack.value) {
                    await room.value.localParticipant.unpublishTrack(localVideoTrack.value)
                    localVideoTrack.value.stop()
                    localVideoTrack.value = null
                }

                // –í–∫–ª—é—á–∞–µ–º –Ω–æ–≤—É—é –∫–∞–º–µ—Ä—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                if (deviceId) {
                    const videoTrack = await createLocalVideoTrack({
                        deviceId: { exact: deviceId },
                        facingMode: 'user'
                    })
                    localVideoTrack.value = videoTrack
                    await room.value.localParticipant.publishTrack(videoTrack, {
                        source: Track.Source.Camera,
                        simulcast: true
                    })
                    console.log('‚úÖ –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞')
                }
            } else if (type === 'audio') {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                stopLocalVolumeMonitoring()

                // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∏–∫—Ä–æ—Ñ–æ–Ω
                if (localAudioTrack.value) {
                    await room.value.localParticipant.unpublishTrack(localAudioTrack.value)
                    localAudioTrack.value.stop()
                    localAudioTrack.value = null
                }

                // –í–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                if (deviceId) {
                    const audioTrack = await createLocalAudioTrack({
                        deviceId: { exact: deviceId },
                        echoCancellation: true,
                        noiseSuppression: true
                    })
                    localAudioTrack.value = audioTrack
                    await room.value.localParticipant.publishTrack(audioTrack, { source: Track.Source.Microphone })

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
                    startLocalVolumeMonitoring()
                    console.log('‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω')
                }
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', err)
            error.value = `–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã ${type === 'video' ? '–∫–∞–º–µ—Ä—ã' : '–º–∏–∫—Ä–æ—Ñ–æ–Ω–∞'}: ${err.message}`
        }
    }

    // ===== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ö–û–ú–ù–ê–¢–ï =====
    const joinRoom = async (userEmail = null) => {
        try {
            connecting.value = true
            error.value = null

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º userEmail –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ userName
            const tokenUserId = userEmail || userName.value
            const actualRoomName = roomName?.value || roomName

            const token = await fetchToken(tokenUserId, actualRoomName)


            room.value = new Room()

            // handlers
            room.value.on(RoomEvent.TrackSubscribed, (track, publication, participant) => {
                console.log(`üì• –¢—Ä–µ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω: ${track.kind} –æ—Ç ${participant.identity}`)

                const trackInfo = { track, participant, publication }
                remoteTracks.value.push(trackInfo)

                if (track.kind === 'audio') {
                    attachRemoteAudio(track, participant)
                }
            })

            room.value.on(RoomEvent.TrackUnsubscribed, (track, publication, participant) => {
                console.log(`üì§ –¢—Ä–µ–∫ –æ—Ç–ø–∏—Å–∞–Ω: ${track.kind} –æ—Ç ${participant.identity}`)
                remoteTracks.value = remoteTracks.value.filter(t => t.track.sid !== track.sid)

                if (track.kind === 'audio') {
                    const audioEl = document.querySelector(`audio[data-track-sid="${track.sid}"]`)
                    if (audioEl) {
                        audioEl.remove()
                    }
                }
            })

            room.value.on(RoomEvent.ParticipantConnected, (participant) => {
                console.log(`üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${participant.identity}`)
                participants.value = Array.from(room.value.remoteParticipants.values())
            })

            room.value.on(RoomEvent.ParticipantDisconnected, (participant) => {
                console.log(`üëã –£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${participant.identity}`)
                remoteTracks.value = remoteTracks.value.filter(t => t.participant.sid !== participant.sid)
                participants.value = Array.from(room.value.remoteParticipants.values())

                // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
                activeSpeakers.value = activeSpeakers.value.filter(s => s.identity !== participant.identity)
                speakingParticipants.value.delete(participant.identity)
            })

            room.value.on(RoomEvent.ActiveSpeakersChanged, handleActiveSpeakersChanged)
            room.value.on(RoomEvent.ParticipantMetadataChanged, (metadata, participant) => {
                console.log(`üìù –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã –¥–ª—è ${participant.identity}:`, metadata)
            })

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≥–æ–≤–æ—Ä–µ–Ω–∏—è
            room.value.on('isSpeakingChanged', handleParticipantSpeakingChanged)

            // connect
            await room.value.connect('wss://realtor.baza.expert/livekit', token)
            connected.value = true
            participants.value = Array.from(room.value.remoteParticipants.values())
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ:', actualRoomName)

            // –í—ã–±–æ—Ä –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            let chosenDeviceId = undefined
            try {
                const devices = await navigator.mediaDevices.enumerateDevices()
                const audioInputs = devices.filter(d => d.kind === 'audioinput')
                if (audioInputs.length > 0) {
                    const defaultCandidate = audioInputs.find(d => d.deviceId === 'default') || audioInputs[0]
                    chosenDeviceId = defaultCandidate.deviceId
                    console.log('Selected default audio input:', defaultCandidate.label || chosenDeviceId)
                }
            } catch (e) {
                console.warn('enumerateDevices failed:', e)
            }

            // —Å–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
            try {
                const videoTrack = await createLocalVideoTrack({ facingMode: 'user' })
                localVideoTrack.value = videoTrack
                await room.value.localParticipant.publishTrack(videoTrack, {
                    source: Track.Source.Camera,
                    simulcast: true
                })
                console.log('‚úÖ –í–∏–¥–µ–æ —Ç—Ä–µ–∫ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')
            } catch (e) {
                console.warn('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∞:', e)
            }

            try {
                const audioOptions = {
                    echoCancellation: true,
                    noiseSuppression: true,
                }
                if (chosenDeviceId) audioOptions.deviceId = chosenDeviceId

                const audioTrack = await createLocalAudioTrack(audioOptions)
                localAudioTrack.value = audioTrack
                await room.value.localParticipant.publishTrack(audioTrack, { source: Track.Source.Microphone })

                // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                startLocalVolumeMonitoring()
                console.log('‚úÖ –ê—É–¥–∏–æ —Ç—Ä–µ–∫ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')
            } catch (e) {
                console.warn('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞:', e)
            }

            setTimeout(() => tryEnablePlayback(), 300)
        } catch (err) {
            console.error('Join error', err)
            error.value = err?.message || String(err)
        } finally {
            connecting.value = false
        }
    }

    const leaveRoom = async () => {
        try {
            stopLocalVolumeMonitoring()

            if (localVideoTrack.value) {
                localVideoTrack.value.stop()
                localVideoTrack.value = null
            }
            if (localAudioTrack.value) {
                localAudioTrack.value.stop()
                localAudioTrack.value = null
            }
            if (localScreenTrack.value) {
                localScreenTrack.value.stop()
                localScreenTrack.value = null
            }

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
            document.querySelectorAll('audio[data-track-sid]').forEach(el => el.remove())

            if (room.value) {
                await room.value.disconnect()
            }
        } finally {
            room.value = null
            connected.value = false
            participants.value = []
            remoteTracks.value = []
            activeSpeakers.value = []
            speakingParticipants.value.clear()
            playbackBlocked.value = false
            error.value = null
            isScreenSharing.value = false
            console.log('‚úÖ –ü–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É')
        }
    }

    const toggleCamera = async () => {
        if (!room.value) return

        try {
            if (localVideoTrack.value) {
                await room.value.localParticipant.unpublishTrack(localVideoTrack.value)
                localVideoTrack.value.stop()
                localVideoTrack.value = null
                console.log('üì∑ –ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞')
            } else {
                const videoTrack = await createLocalVideoTrack({ facingMode: 'user' })
                await room.value.localParticipant.publishTrack(videoTrack, {
                    source: Track.Source.Camera,
                    simulcast: true
                })
                localVideoTrack.value = videoTrack
                console.log('üì∑ –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞')
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã:', err)
            error.value = `–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: ${err.message}`
        }
    }

    const toggleMicrophone = async () => {
        if (!room.value) return

        try {
            if (localAudioTrack.value) {
                stopLocalVolumeMonitoring()
                await room.value.localParticipant.unpublishTrack(localAudioTrack.value)
                localAudioTrack.value.stop()
                localAudioTrack.value = null
                console.log('üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω')
            } else {
                // –ü–æ–¥–±–∏—Ä–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                let chosenDeviceId = undefined
                try {
                    const devices = await navigator.mediaDevices.enumerateDevices()
                    const audioInputs = devices.filter(d => d.kind === 'audioinput')
                    const defaultCandidate = audioInputs.find(d => d.deviceId === 'default') || audioInputs[0]
                    chosenDeviceId = defaultCandidate?.deviceId
                } catch { }

                const opts = { echoCancellation: true, noiseSuppression: true }
                if (chosenDeviceId) opts.deviceId = chosenDeviceId

                const audioTrack = await createLocalAudioTrack(opts)
                await room.value.localParticipant.publishTrack(audioTrack, { source: Track.Source.Microphone })
                localAudioTrack.value = audioTrack

                // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                startLocalVolumeMonitoring()
                console.log('üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω')
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', err)
            error.value = `–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: ${err.message}`
        }
    }

    // ===== –®–ê–†–ò–ù–ì –≠–ö–†–ê–ù–ê =====
    const startScreenShare = async () => {
        if (!room.value) return

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ LocalParticipant API
            await room.value.localParticipant.setScreenShareEnabled(true, {
                audio: true, // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —Å —ç–∫—Ä–∞–Ω–∞
                resolution: { width: 1920, height: 1080 } // –ö–∞—á–µ—Å—Ç–≤–æ HD
            })

            isScreenSharing.value = true
            console.log('üì∫ –®–∞—Ä–∏–Ω–≥ —ç–∫—Ä–∞–Ω–∞ –Ω–∞—á–∞—Ç')

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —à–∞—Ä–∏–Ω–≥–∞ —ç–∫—Ä–∞–Ω–∞:', err)
            error.value = `–û—à–∏–±–∫–∞ —à–∞—Ä–∏–Ω–≥–∞ —ç–∫—Ä–∞–Ω–∞: ${err.message}`
        }
    }

    const stopScreenShare = async () => {
        if (!room.value) return

        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞—Ä–∏–Ω–≥ —ç–∫—Ä–∞–Ω–∞
            await room.value.localParticipant.setScreenShareEnabled(false)

            isScreenSharing.value = false
            console.log('üì∫ –®–∞—Ä–∏–Ω–≥ —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞—Ä–∏–Ω–≥–∞:', err)
            error.value = `–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞—Ä–∏–Ω–≥–∞: ${err.message}`
        }
    }

    const toggleScreenShare = async () => {
        if (isScreenSharing.value) {
            await stopScreenShare()
        } else {
            await startScreenShare()
        }
    }

    const tryEnablePlayback = async () => {
        playbackBlocked.value = false
        const els = Array.from(document.querySelectorAll('audio, video'))
        for (const el of els) {
            try {
                if (el.tagName.toLowerCase() === 'video' && el.muted) {
                    await el.play().catch(() => { })
                    continue
                }
                await el.play().catch(() => { playbackBlocked.value = true })
            } catch (e) {
                playbackBlocked.value = true
            }
        }
    }

    // ===== CLEANUP =====
    const cleanup = () => {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏')
        leaveRoom()
    }

    return {
        // State
        room,
        connected,
        connecting,
        error,
        playbackBlocked,
        userName,
        localVideoTrack,
        localAudioTrack,
        localScreenTrack,
        isScreenSharing,
        remoteTracks,
        participants,
        activeSpeakers,
        localVolumeLevel,
        isLocalSpeaking,

        // Computed
        isActiveSpeaker,
        isSpeaking,
        getPrimarySpeaker,
        getParticipantVideoTrack,
        getParticipantAudioTrack,
        getParticipantScreenTrack,

        // Methods
        requestMediaPermissions,
        onDeviceChanged,
        joinRoom,
        leaveRoom,
        toggleCamera,
        toggleMicrophone,
        toggleScreenShare,
        startScreenShare,
        stopScreenShare,
        tryEnablePlayback,
        cleanup
    }
}